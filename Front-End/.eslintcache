[{"C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\index.js":"1","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\reportWebVitals.js":"2","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\App.js":"3","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\AddEvent.js":"4","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\UpdateEvent.js":"5","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\Accueil.js":"6","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\AllEvents.js":"7"},{"size":589,"mtime":1610123998000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610123998000,"results":"10","hashOfConfig":"9"},{"size":628,"mtime":1610123998000,"results":"11","hashOfConfig":"9"},{"size":3517,"mtime":1610123998000,"results":"12","hashOfConfig":"9"},{"size":3873,"mtime":1610123998000,"results":"13","hashOfConfig":"9"},{"size":295,"mtime":1610123998000,"results":"14","hashOfConfig":"9"},{"size":2433,"mtime":1610123998000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"cqcgoh",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\index.js",[],["36","37"],"C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\reportWebVitals.js",[],"C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\App.js",["38"],"import logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router,Route} from 'react-router-dom'\nimport AddEvent from './AddEvent'\nimport Accueil  from './Accueil'\nimport UpdateEvent from './UpdateEvent'\nimport AllEvents from './AllEvents'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Router>\n      <Route path=\"/\" exact component={Accueil}/> \n      <Route path=\"/allEvents\" exact component={AllEvents}/>\n      <Route path=\"/addEvent\" exact component={AddEvent}/> \n      <Route path=\"/updateEvent/:eventId\" exact component={UpdateEvent}/>     \n    </Router>\n  </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\AddEvent.js",["39"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport moment from \"moment\";\n\n\n\nclass AddEvent extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      name: '',\n      place: '',\n      city: '',\n      postcode: 0,\n      description: '',\n      hour :'',\n      date : moment(),\n    }\n    this.formData = new FormData();\n  }\n\n  myChangeHandler = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  myChangeHandlerFile = (e) => {\n    this.formData.append('image',e.target.files[0])\n  }\n\n\n  mySubmitHandler = (e) => {\n    e.preventDefault();\n    this.formData.append('name',this.state.name);\n    this.formData.append('place',this.state.place);\n    this.formData.append('city',this.state.city);\n    this.formData.append('postcode',this.state.postcode);\n    this.formData.append('description',this.state.description);\n    this.formData.append('date',this.state.date);\n    this.formData.append('hour',this.state.hour)\n    fetch('http://localhost:3001/api/event/addEvent', {\n      method: \"POST\",\n      body: this.formData\n    })\n    .then((response) => response.json())\n    .then((result) => {\n      this.props.history.push('/updateEvent/' + result.event._id);\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1> Ajout d'un événement </h1>\n        <form onSubmit={this.mySubmitHandler} encType=\"multipart/form-data\" >\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Nom</label>\n            <input className=\"form-control\" type=\"text\" id=\"name\" name=\"name\" onChange={this.myChangeHandler} required/>\n          </div>\n        \n          <div className=\"form-group\">\n            <label htmlFor=\"place\"> Lieu </label>\n            <input className=\"form-control\" type=\"text\" id=\"place\" name=\"place\" onChange={this.myChangeHandler} required/>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"city\"> Ville </label>\n            <input type=\"text\" id=\"city\" name=\"city\" className=\"form-control\" onChange={this.myChangeHandler} required/>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"postcode\"> Code postal </label>\n            <input type=\"numer\" id=\"postcode\" name=\"postcode\" className=\"form-control\" onChange={this.myChangeHandler} required/>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"description\"> Description </label>\n            <textarea id=\"description\" name=\"description\" className=\"form-control\" onChange={this.myChangeHandler} required> </textarea>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"col\">\n              <label htmlFor=\"date\"> Date </label>\n              <input type=\"date\" id=\"date\" name=\"date\" className=\"form-control\" onChange={this.myChangeHandler} value={moment(this.state.date).format(\"YYYY-MM-DD\")} required/>\n            </div>\n            <div className=\"col\">\n              <label htmlFor=\"hour\"> Heure </label>\n              <input type=\"time\" id=\"hour\" name=\"hour\" className=\"form-control\" onChange={this.myChangeHandler}/>\n            </div>\n            \n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"image\"> Image </label>\n            <input type=\"file\" id=\"image\" name=\"image\" className=\"form-control\" onChange={this.myChangeHandlerFile}/>\n          </div>\n\n          <input type=\"submit\" value=\"Envoyer\" />\n      </form>\n    </div>\n     \n    );\n  }\n\n\n\n}\n\nexport default AddEvent;\n","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\UpdateEvent.js",["40","41","42"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport moment from \"moment\";\nimport DatePicker from 'react-datepicker'\n\nclass UpdateEvent extends React.Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      name: '',\n      eventId:'',\n      place: '',\n      city: '',\n      postcode: 0,\n      description: '',\n      hour:'',\n      date : 'moment().format(\"DD-MM-YYYY hh:mm:ss\")'\n    }\n  }\n\n  componentDidMount() {\n    let eventId = this.props.match.params.eventId;\n    this.setState({eventId : eventId})\n    let json = {\"eventId\" : eventId};\n    json = JSON.stringify(json);\n    fetch('http://localhost:3001/api/event/oneEvent', {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json',\n      },\n      body: json\n    })\n    .then((response) => response.json())\n    .then((result) => {\n      this.setState({name : result.response.name})\n      this.setState({place : result.response.place})\n      this.setState({city : result.response.city})\n      this.setState({postcode : result.response.postcode})\n      this.setState({description : result.response.description})\n      this.setState({date : result.response.date})\n      this.setState({hour : result.response.hour})\n    })\n }\n\n  myChangeHandler = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n\n  mySubmitHandler = (e) => {\n    e.preventDefault();\n    console.log(this.state);\n    fetch('http://localhost:3001/api/event/updateEvent', {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(this.state)\n    })\n    .then((response) => response.json())\n    .then((result) => {\n      console.log(result)\n    })\n  }\n\n render() {\n  return (\n    <div>\n      <h1> Modification de l'événement {this.state.name} </h1>\n      <form onSubmit={this.mySubmitHandler}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Nom</label>\n          <input className=\"form-control\" type=\"text\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.myChangeHandler} required/>\n        </div>\n      \n        <div className=\"form-group\">\n          <label htmlFor=\"place\"> Lieu </label>\n          <input className=\"form-control\" type=\"text\" id=\"place\" name=\"place\" value={this.state.place} onChange={this.myChangeHandler} required/>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"city\"> Ville </label>\n          <input type=\"text\" id=\"city\" name=\"city\" className=\"form-control\" value={this.state.city} onChange={this.myChangeHandler} required/>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"postcode\"> Code postal </label>\n          <input type=\"numer\" id=\"postcode\" name=\"postcode\" className=\"form-control\" value={this.state.postcode} onChange={this.myChangeHandler} required/>\n        </div>\n\n        <div className=\"form-group\">\n          <label htmlFor=\"description\"> Description </label>\n          <textarea id=\"description\" name=\"description\" className=\"form-control\" value={this.state.description} onChange={this.myChangeHandler} required> </textarea>\n        </div>\n\n        <div className=\"form-row mb-2\">\n          <div className=\"col\">\n            <label htmlFor=\"date\"> Date </label>\n            <input type=\"date\" id=\"date\" name=\"date\" className=\"form-control\" value={this.state.date} onChange={this.myChangeHandler} value={moment(this.state.date).format(\"YYYY-MM-DD\")} required/>\n          </div>\n          <div className=\"col\">\n              <label htmlFor=\"hour\"> Heure </label>\n              <input type=\"time\" id=\"hour\" name=\"hour\" className=\"form-control\" onChange={this.myChangeHandler} defaultValue={this.state.hour}/>\n          </div>\n        </div>\n\n  \n        <input type=\"submit\" value=\"Envoyer\" />\n    </form>\n  </div>\n   \n  );\n}\n    \n\n\n}\n\nexport default UpdateEvent;\n","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\Accueil.js",["43","44","45","46"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport AddEvent from './AddEvent'\nimport {BrowserRouter as Router,Route} from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p> Bienvenue </p>\n    </div>\n  );\n}\n\n\nexport default App;\n","C:\\Users\\Dell\\Documents\\M2 e-service\\NodeJS\\shallwedance\\Front-End\\src\\AllEvents.js",["47"],"import React from 'react';\nimport moment from 'moment';\nimport 'moment/locale/fr';\n\nclass AllEvents extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state= {\n            allEvents : []\n        }\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:3001/api/event/allEvents', {\n        method: \"GET\",\n        headers: {\n            'Content-type': 'application/json',\n        }\n        })\n        .then((response) => response.json())\n        .then((result) => {\n            this.setState({allEvents : result.response})\n        })\n    }\n\n    render() {\n        moment.locale('fr');\n        return (\n             <div className=\"row\">\n                 <div className=\"col-md-3 offset-md-9 mb-10\">\n                    <a className=\"btn btn-primary w-100\" href={'/addEvent'} > Créer un événement </a>\n                 </div>\n                 {this.state.allEvents.map(event => (\n                     <div className=\"col-md-12 border border-dark mb-3\">\n                        <h2 className=\"text-center\">{event.name}</h2>\n                        <div className=\"row\">\n                            <div className=\"col-md-4 mb-2\">\n                                <img className=\"imgEvent\" src={process.env.PUBLIC_URL + '/images/' + event.image} />\n                            </div>\n                            <div className=\"col-md-6\">\n                                <ul className=\"list-unstyled text-left\">\n                                    <li> Date : {\n                                        event.hour?\n                                            moment(event.date).format(\"DD MMMM YYYY\") + \" à \" + event.hour :\n                                            moment(event.date).format(\"DD MMMM YYYY\")\n                                    } \n                                    </li>\n                                    <li> Lieu : {event.place}</li>\n                                    <li> Code postal : {event.postcode}</li>\n                                </ul>\n                            </div>\n                            <div className=\"col-md-2 mb-3\">\n                                <a className=\"btn btn-primary w-100\" href={'/updateEvent/' + event._id} > Modifier </a>\n                            </div>\n                        </div>\n                     </div>\n                     \n                 ))}\n             </div>\n        )\n    }\n\n}\nexport default AllEvents;\n\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"56","line":5,"column":8,"nodeType":"54","messageId":"55","endLine":5,"endColumn":18},{"ruleId":"57","severity":1,"message":"58","line":100,"column":135,"nodeType":"59","endLine":100,"endColumn":187},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":12},{"ruleId":"52","severity":1,"message":"60","line":4,"column":8,"nodeType":"54","messageId":"55","endLine":4,"endColumn":16},{"ruleId":"52","severity":1,"message":"61","line":5,"column":26,"nodeType":"54","messageId":"55","endLine":5,"endColumn":32},{"ruleId":"52","severity":1,"message":"62","line":5,"column":33,"nodeType":"54","messageId":"55","endLine":5,"endColumn":38},{"ruleId":"63","severity":1,"message":"64","line":39,"column":33,"nodeType":"65","endLine":39,"endColumn":117},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'DatePicker' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'AddEvent' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]